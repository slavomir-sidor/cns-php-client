<?php
/**
 * NotificationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CNS REST-API
 *
 * Version v1.2.0 of Corporate Notification System (CNS) REST API.
 *
 * The version of the OpenAPI document: v1.2.0
 * Contact: DIGIT-CNS-SUPPORT@ec.europa.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EC\CNS\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EC\CNS\Client\ApiException;
use EC\CNS\Client\Configuration;
use EC\CNS\Client\HeaderSelector;
use EC\CNS\Client\ObjectSerializer;

/**
 * NotificationsApi Class Doc Comment
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NotificationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1NotificationsBulkPost
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\BulkNotificationRequest $notification Submitted notification. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\NotificationId|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1NotificationsBulkPost($client_system_key, $client_system_password, $notification)
    {
        list($response) = $this->v1NotificationsBulkPostWithHttpInfo($client_system_key, $client_system_password, $notification);
        return $response;
    }

    /**
     * Operation v1NotificationsBulkPostWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\BulkNotificationRequest $notification Submitted notification. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\NotificationId|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1NotificationsBulkPostWithHttpInfo($client_system_key, $client_system_password, $notification)
    {
        $request = $this->v1NotificationsBulkPostRequest($client_system_key, $client_system_password, $notification);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\EC\CNS\Client\Model\NotificationId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\NotificationId' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\NotificationId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\NotificationId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\NotificationId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1NotificationsBulkPostAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\BulkNotificationRequest $notification Submitted notification. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsBulkPostAsync($client_system_key, $client_system_password, $notification)
    {
        return $this->v1NotificationsBulkPostAsyncWithHttpInfo($client_system_key, $client_system_password, $notification)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1NotificationsBulkPostAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\BulkNotificationRequest $notification Submitted notification. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsBulkPostAsyncWithHttpInfo($client_system_key, $client_system_password, $notification)
    {
        $returnType = '\EC\CNS\Client\Model\NotificationId';
        $request = $this->v1NotificationsBulkPostRequest($client_system_key, $client_system_password, $notification);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1NotificationsBulkPost'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\BulkNotificationRequest $notification Submitted notification. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1NotificationsBulkPostRequest($client_system_key, $client_system_password, $notification)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1NotificationsBulkPost'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1NotificationsBulkPost'
            );
        }

        // verify the required parameter 'notification' is set
        if ($notification === null || (is_array($notification) && count($notification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification when calling v1NotificationsBulkPost'
            );
        }

        $resourcePath = '/v1/notifications/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($notification)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($notification));
            } else {
                $httpBody = $notification;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1NotificationsBulkStatusReferenceIdGet
     *
     * @param  string $reference_id Bulk reference id. Provide the notificationId if it is known (default enabled) Enable retrieval by \&quot;externalReference\&quot; with \&quot;referenceType\&quot; query param (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $include_details Optional. Provide \&quot;true\&quot; if bulk notification details are needed,like all linked notificationIds (optional)
     * @param  string $reference_type Optional Specify notification retrieval   - by notificationId - referenceType&#x3D;\&quot;NOTIFICATION_ID\&quot;   - by externalReference - referenceType&#x3D;\&quot;EXTERNAL_REFERENCE\&quot; (optional)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\BulkNotificationStatus|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1NotificationsBulkStatusReferenceIdGet($reference_id, $client_system_key, $client_system_password, $include_details = null, $reference_type = null)
    {
        list($response) = $this->v1NotificationsBulkStatusReferenceIdGetWithHttpInfo($reference_id, $client_system_key, $client_system_password, $include_details, $reference_type);
        return $response;
    }

    /**
     * Operation v1NotificationsBulkStatusReferenceIdGetWithHttpInfo
     *
     * @param  string $reference_id Bulk reference id. Provide the notificationId if it is known (default enabled) Enable retrieval by \&quot;externalReference\&quot; with \&quot;referenceType\&quot; query param (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $include_details Optional. Provide \&quot;true\&quot; if bulk notification details are needed,like all linked notificationIds (optional)
     * @param  string $reference_type Optional Specify notification retrieval   - by notificationId - referenceType&#x3D;\&quot;NOTIFICATION_ID\&quot;   - by externalReference - referenceType&#x3D;\&quot;EXTERNAL_REFERENCE\&quot; (optional)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\BulkNotificationStatus|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1NotificationsBulkStatusReferenceIdGetWithHttpInfo($reference_id, $client_system_key, $client_system_password, $include_details = null, $reference_type = null)
    {
        $request = $this->v1NotificationsBulkStatusReferenceIdGetRequest($reference_id, $client_system_key, $client_system_password, $include_details, $reference_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\BulkNotificationStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\BulkNotificationStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\BulkNotificationStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\BulkNotificationStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\BulkNotificationStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1NotificationsBulkStatusReferenceIdGetAsync
     *
     * @param  string $reference_id Bulk reference id. Provide the notificationId if it is known (default enabled) Enable retrieval by \&quot;externalReference\&quot; with \&quot;referenceType\&quot; query param (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $include_details Optional. Provide \&quot;true\&quot; if bulk notification details are needed,like all linked notificationIds (optional)
     * @param  string $reference_type Optional Specify notification retrieval   - by notificationId - referenceType&#x3D;\&quot;NOTIFICATION_ID\&quot;   - by externalReference - referenceType&#x3D;\&quot;EXTERNAL_REFERENCE\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsBulkStatusReferenceIdGetAsync($reference_id, $client_system_key, $client_system_password, $include_details = null, $reference_type = null)
    {
        return $this->v1NotificationsBulkStatusReferenceIdGetAsyncWithHttpInfo($reference_id, $client_system_key, $client_system_password, $include_details, $reference_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1NotificationsBulkStatusReferenceIdGetAsyncWithHttpInfo
     *
     * @param  string $reference_id Bulk reference id. Provide the notificationId if it is known (default enabled) Enable retrieval by \&quot;externalReference\&quot; with \&quot;referenceType\&quot; query param (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $include_details Optional. Provide \&quot;true\&quot; if bulk notification details are needed,like all linked notificationIds (optional)
     * @param  string $reference_type Optional Specify notification retrieval   - by notificationId - referenceType&#x3D;\&quot;NOTIFICATION_ID\&quot;   - by externalReference - referenceType&#x3D;\&quot;EXTERNAL_REFERENCE\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsBulkStatusReferenceIdGetAsyncWithHttpInfo($reference_id, $client_system_key, $client_system_password, $include_details = null, $reference_type = null)
    {
        $returnType = '\EC\CNS\Client\Model\BulkNotificationStatus';
        $request = $this->v1NotificationsBulkStatusReferenceIdGetRequest($reference_id, $client_system_key, $client_system_password, $include_details, $reference_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1NotificationsBulkStatusReferenceIdGet'
     *
     * @param  string $reference_id Bulk reference id. Provide the notificationId if it is known (default enabled) Enable retrieval by \&quot;externalReference\&quot; with \&quot;referenceType\&quot; query param (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $include_details Optional. Provide \&quot;true\&quot; if bulk notification details are needed,like all linked notificationIds (optional)
     * @param  string $reference_type Optional Specify notification retrieval   - by notificationId - referenceType&#x3D;\&quot;NOTIFICATION_ID\&quot;   - by externalReference - referenceType&#x3D;\&quot;EXTERNAL_REFERENCE\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1NotificationsBulkStatusReferenceIdGetRequest($reference_id, $client_system_key, $client_system_password, $include_details = null, $reference_type = null)
    {

        // verify the required parameter 'reference_id' is set
        if ($reference_id === null || (is_array($reference_id) && count($reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_id when calling v1NotificationsBulkStatusReferenceIdGet'
            );
        }

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1NotificationsBulkStatusReferenceIdGet'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1NotificationsBulkStatusReferenceIdGet'
            );
        }



        $resourcePath = '/v1/notifications/bulk/status/{referenceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_details,
            'includeDetails', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_type,
            'referenceType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($reference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceId' . '}',
                ObjectSerializer::toPathValue($reference_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1NotificationsGet
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket The authorization ticket provided from ECAS after authentication. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     * @param  string $expression The QL search expression. If not present or empty, search by email will be performed. A QL expression is a logical expression build from one or more conditions combined together with logical operators (AND, OR, NOT). A condition looks like NAME OPERATOR VALUE, where OPERATOR is one of &lt;, &gt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;, !&#x3D;, IS NULL, IS NOT NULL, CONTAINS, BETWEEN, IN, STARTSWITH and ENDSWITH. List of fields that can be ussed in search expression &#x60;:&#x60; notificationId &#x60;:&#x60; the notification id clientId &#x60;:&#x60; the notification client id submissionDate &#x60;:&#x60; the submission date of notification externalReference  &#x60;:&#x60; the external reference used when submitting the notification. Type String string1  &#x60;:&#x60; the business specific metadata string1. Type String string2  &#x60;:&#x60; the business specific metadata string2. Type String string3  &#x60;:&#x60; the business specific metadata string3. Type String string4  &#x60;:&#x60; the business specific metadata string4. Type String string5  &#x60;:&#x60; the business specific metadata string5. Type String date1    &#x60;:&#x60; the business specific metadata date1. Type Date date2    &#x60;:&#x60; the business specific metadata date2. Type Date date3    &#x60;:&#x60; the business specific metadata date3. Type Date date4    &#x60;:&#x60; the business specific metadata date4. Type Date date5    &#x60;:&#x60; the business specific metadata date5. Type Date num1     &#x60;:&#x60; the business specific metadata num1. Type Number num2     &#x60;:&#x60; the business specific metadata num2. Type Number num3     &#x60;:&#x60; the business specific metadata num3. Type Number num4     &#x60;:&#x60; the business specific metadata num4. Type Number num5     &#x60;:&#x60; the business specific metadata num5. Type Number boolean1 &#x60;:&#x60; the business specific metadata boolean1. Type Boolean boolean2 &#x60;:&#x60; the business specific metadata boolean2. Type Boolean boolean3 &#x60;:&#x60; the business specific metadata boolean3. Type Boolean boolean4 &#x60;:&#x60; the business specific metadata boolean4. Type Boolean boolean5 &#x60;:&#x60; the business specific metadata boolean5. Type Boolean (optional)
     * @param  bool $include_bsm Specifies that notification will additionally contain business specific metadata. (optional)
     * @param  bool $include_content_body Specifies that notification will contain email body. (optional)
     * @param  int $skip Skip n-1 elements and start retrieving results from n (part of pagination). &gt;- Only values &gt;&#x3D; 0 are permitted. If value is omited in will be set to 0. (optional)
     * @param  int $max Maximum number of entries to be retrieved by the search. The supported maximum value is 1000 and trying to retrive more then 1000 notifications will result in error. Default value for size is 10. (optional)
     * @param  int $compute_total_results Indicates if the total number of results should be computed and returned or not. (optional)
     * @param  string $order_by Indicates on which field to order results. The same fields as in &#x60;expression&#x60; can be used, with the addition of a special field called &#39;score&#39; used for ordering based on fulltext search score (when fulltext search is available). (optional)
     * @param  string $order_type &#39;ASC&#39; (Default), &#39;DESC&#39; (optional)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\NotificationSearchResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1NotificationsGet($client_system_key, $client_system_password, $authorization = null, $ecas_ticket = null, $ecas_environment = null, $expression = null, $include_bsm = null, $include_content_body = null, $skip = null, $max = null, $compute_total_results = null, $order_by = null, $order_type = null)
    {
        list($response) = $this->v1NotificationsGetWithHttpInfo($client_system_key, $client_system_password, $authorization, $ecas_ticket, $ecas_environment, $expression, $include_bsm, $include_content_body, $skip, $max, $compute_total_results, $order_by, $order_type);
        return $response;
    }

    /**
     * Operation v1NotificationsGetWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket The authorization ticket provided from ECAS after authentication. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     * @param  string $expression The QL search expression. If not present or empty, search by email will be performed. A QL expression is a logical expression build from one or more conditions combined together with logical operators (AND, OR, NOT). A condition looks like NAME OPERATOR VALUE, where OPERATOR is one of &lt;, &gt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;, !&#x3D;, IS NULL, IS NOT NULL, CONTAINS, BETWEEN, IN, STARTSWITH and ENDSWITH. List of fields that can be ussed in search expression &#x60;:&#x60; notificationId &#x60;:&#x60; the notification id clientId &#x60;:&#x60; the notification client id submissionDate &#x60;:&#x60; the submission date of notification externalReference  &#x60;:&#x60; the external reference used when submitting the notification. Type String string1  &#x60;:&#x60; the business specific metadata string1. Type String string2  &#x60;:&#x60; the business specific metadata string2. Type String string3  &#x60;:&#x60; the business specific metadata string3. Type String string4  &#x60;:&#x60; the business specific metadata string4. Type String string5  &#x60;:&#x60; the business specific metadata string5. Type String date1    &#x60;:&#x60; the business specific metadata date1. Type Date date2    &#x60;:&#x60; the business specific metadata date2. Type Date date3    &#x60;:&#x60; the business specific metadata date3. Type Date date4    &#x60;:&#x60; the business specific metadata date4. Type Date date5    &#x60;:&#x60; the business specific metadata date5. Type Date num1     &#x60;:&#x60; the business specific metadata num1. Type Number num2     &#x60;:&#x60; the business specific metadata num2. Type Number num3     &#x60;:&#x60; the business specific metadata num3. Type Number num4     &#x60;:&#x60; the business specific metadata num4. Type Number num5     &#x60;:&#x60; the business specific metadata num5. Type Number boolean1 &#x60;:&#x60; the business specific metadata boolean1. Type Boolean boolean2 &#x60;:&#x60; the business specific metadata boolean2. Type Boolean boolean3 &#x60;:&#x60; the business specific metadata boolean3. Type Boolean boolean4 &#x60;:&#x60; the business specific metadata boolean4. Type Boolean boolean5 &#x60;:&#x60; the business specific metadata boolean5. Type Boolean (optional)
     * @param  bool $include_bsm Specifies that notification will additionally contain business specific metadata. (optional)
     * @param  bool $include_content_body Specifies that notification will contain email body. (optional)
     * @param  int $skip Skip n-1 elements and start retrieving results from n (part of pagination). &gt;- Only values &gt;&#x3D; 0 are permitted. If value is omited in will be set to 0. (optional)
     * @param  int $max Maximum number of entries to be retrieved by the search. The supported maximum value is 1000 and trying to retrive more then 1000 notifications will result in error. Default value for size is 10. (optional)
     * @param  int $compute_total_results Indicates if the total number of results should be computed and returned or not. (optional)
     * @param  string $order_by Indicates on which field to order results. The same fields as in &#x60;expression&#x60; can be used, with the addition of a special field called &#39;score&#39; used for ordering based on fulltext search score (when fulltext search is available). (optional)
     * @param  string $order_type &#39;ASC&#39; (Default), &#39;DESC&#39; (optional)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\NotificationSearchResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1NotificationsGetWithHttpInfo($client_system_key, $client_system_password, $authorization = null, $ecas_ticket = null, $ecas_environment = null, $expression = null, $include_bsm = null, $include_content_body = null, $skip = null, $max = null, $compute_total_results = null, $order_by = null, $order_type = null)
    {
        $request = $this->v1NotificationsGetRequest($client_system_key, $client_system_password, $authorization, $ecas_ticket, $ecas_environment, $expression, $include_bsm, $include_content_body, $skip, $max, $compute_total_results, $order_by, $order_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\NotificationSearchResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\NotificationSearchResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\NotificationSearchResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\NotificationSearchResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\NotificationSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1NotificationsGetAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket The authorization ticket provided from ECAS after authentication. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     * @param  string $expression The QL search expression. If not present or empty, search by email will be performed. A QL expression is a logical expression build from one or more conditions combined together with logical operators (AND, OR, NOT). A condition looks like NAME OPERATOR VALUE, where OPERATOR is one of &lt;, &gt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;, !&#x3D;, IS NULL, IS NOT NULL, CONTAINS, BETWEEN, IN, STARTSWITH and ENDSWITH. List of fields that can be ussed in search expression &#x60;:&#x60; notificationId &#x60;:&#x60; the notification id clientId &#x60;:&#x60; the notification client id submissionDate &#x60;:&#x60; the submission date of notification externalReference  &#x60;:&#x60; the external reference used when submitting the notification. Type String string1  &#x60;:&#x60; the business specific metadata string1. Type String string2  &#x60;:&#x60; the business specific metadata string2. Type String string3  &#x60;:&#x60; the business specific metadata string3. Type String string4  &#x60;:&#x60; the business specific metadata string4. Type String string5  &#x60;:&#x60; the business specific metadata string5. Type String date1    &#x60;:&#x60; the business specific metadata date1. Type Date date2    &#x60;:&#x60; the business specific metadata date2. Type Date date3    &#x60;:&#x60; the business specific metadata date3. Type Date date4    &#x60;:&#x60; the business specific metadata date4. Type Date date5    &#x60;:&#x60; the business specific metadata date5. Type Date num1     &#x60;:&#x60; the business specific metadata num1. Type Number num2     &#x60;:&#x60; the business specific metadata num2. Type Number num3     &#x60;:&#x60; the business specific metadata num3. Type Number num4     &#x60;:&#x60; the business specific metadata num4. Type Number num5     &#x60;:&#x60; the business specific metadata num5. Type Number boolean1 &#x60;:&#x60; the business specific metadata boolean1. Type Boolean boolean2 &#x60;:&#x60; the business specific metadata boolean2. Type Boolean boolean3 &#x60;:&#x60; the business specific metadata boolean3. Type Boolean boolean4 &#x60;:&#x60; the business specific metadata boolean4. Type Boolean boolean5 &#x60;:&#x60; the business specific metadata boolean5. Type Boolean (optional)
     * @param  bool $include_bsm Specifies that notification will additionally contain business specific metadata. (optional)
     * @param  bool $include_content_body Specifies that notification will contain email body. (optional)
     * @param  int $skip Skip n-1 elements and start retrieving results from n (part of pagination). &gt;- Only values &gt;&#x3D; 0 are permitted. If value is omited in will be set to 0. (optional)
     * @param  int $max Maximum number of entries to be retrieved by the search. The supported maximum value is 1000 and trying to retrive more then 1000 notifications will result in error. Default value for size is 10. (optional)
     * @param  int $compute_total_results Indicates if the total number of results should be computed and returned or not. (optional)
     * @param  string $order_by Indicates on which field to order results. The same fields as in &#x60;expression&#x60; can be used, with the addition of a special field called &#39;score&#39; used for ordering based on fulltext search score (when fulltext search is available). (optional)
     * @param  string $order_type &#39;ASC&#39; (Default), &#39;DESC&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsGetAsync($client_system_key, $client_system_password, $authorization = null, $ecas_ticket = null, $ecas_environment = null, $expression = null, $include_bsm = null, $include_content_body = null, $skip = null, $max = null, $compute_total_results = null, $order_by = null, $order_type = null)
    {
        return $this->v1NotificationsGetAsyncWithHttpInfo($client_system_key, $client_system_password, $authorization, $ecas_ticket, $ecas_environment, $expression, $include_bsm, $include_content_body, $skip, $max, $compute_total_results, $order_by, $order_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1NotificationsGetAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket The authorization ticket provided from ECAS after authentication. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     * @param  string $expression The QL search expression. If not present or empty, search by email will be performed. A QL expression is a logical expression build from one or more conditions combined together with logical operators (AND, OR, NOT). A condition looks like NAME OPERATOR VALUE, where OPERATOR is one of &lt;, &gt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;, !&#x3D;, IS NULL, IS NOT NULL, CONTAINS, BETWEEN, IN, STARTSWITH and ENDSWITH. List of fields that can be ussed in search expression &#x60;:&#x60; notificationId &#x60;:&#x60; the notification id clientId &#x60;:&#x60; the notification client id submissionDate &#x60;:&#x60; the submission date of notification externalReference  &#x60;:&#x60; the external reference used when submitting the notification. Type String string1  &#x60;:&#x60; the business specific metadata string1. Type String string2  &#x60;:&#x60; the business specific metadata string2. Type String string3  &#x60;:&#x60; the business specific metadata string3. Type String string4  &#x60;:&#x60; the business specific metadata string4. Type String string5  &#x60;:&#x60; the business specific metadata string5. Type String date1    &#x60;:&#x60; the business specific metadata date1. Type Date date2    &#x60;:&#x60; the business specific metadata date2. Type Date date3    &#x60;:&#x60; the business specific metadata date3. Type Date date4    &#x60;:&#x60; the business specific metadata date4. Type Date date5    &#x60;:&#x60; the business specific metadata date5. Type Date num1     &#x60;:&#x60; the business specific metadata num1. Type Number num2     &#x60;:&#x60; the business specific metadata num2. Type Number num3     &#x60;:&#x60; the business specific metadata num3. Type Number num4     &#x60;:&#x60; the business specific metadata num4. Type Number num5     &#x60;:&#x60; the business specific metadata num5. Type Number boolean1 &#x60;:&#x60; the business specific metadata boolean1. Type Boolean boolean2 &#x60;:&#x60; the business specific metadata boolean2. Type Boolean boolean3 &#x60;:&#x60; the business specific metadata boolean3. Type Boolean boolean4 &#x60;:&#x60; the business specific metadata boolean4. Type Boolean boolean5 &#x60;:&#x60; the business specific metadata boolean5. Type Boolean (optional)
     * @param  bool $include_bsm Specifies that notification will additionally contain business specific metadata. (optional)
     * @param  bool $include_content_body Specifies that notification will contain email body. (optional)
     * @param  int $skip Skip n-1 elements and start retrieving results from n (part of pagination). &gt;- Only values &gt;&#x3D; 0 are permitted. If value is omited in will be set to 0. (optional)
     * @param  int $max Maximum number of entries to be retrieved by the search. The supported maximum value is 1000 and trying to retrive more then 1000 notifications will result in error. Default value for size is 10. (optional)
     * @param  int $compute_total_results Indicates if the total number of results should be computed and returned or not. (optional)
     * @param  string $order_by Indicates on which field to order results. The same fields as in &#x60;expression&#x60; can be used, with the addition of a special field called &#39;score&#39; used for ordering based on fulltext search score (when fulltext search is available). (optional)
     * @param  string $order_type &#39;ASC&#39; (Default), &#39;DESC&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsGetAsyncWithHttpInfo($client_system_key, $client_system_password, $authorization = null, $ecas_ticket = null, $ecas_environment = null, $expression = null, $include_bsm = null, $include_content_body = null, $skip = null, $max = null, $compute_total_results = null, $order_by = null, $order_type = null)
    {
        $returnType = '\EC\CNS\Client\Model\NotificationSearchResult';
        $request = $this->v1NotificationsGetRequest($client_system_key, $client_system_password, $authorization, $ecas_ticket, $ecas_environment, $expression, $include_bsm, $include_content_body, $skip, $max, $compute_total_results, $order_by, $order_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1NotificationsGet'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket The authorization ticket provided from ECAS after authentication. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     * @param  string $expression The QL search expression. If not present or empty, search by email will be performed. A QL expression is a logical expression build from one or more conditions combined together with logical operators (AND, OR, NOT). A condition looks like NAME OPERATOR VALUE, where OPERATOR is one of &lt;, &gt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;, !&#x3D;, IS NULL, IS NOT NULL, CONTAINS, BETWEEN, IN, STARTSWITH and ENDSWITH. List of fields that can be ussed in search expression &#x60;:&#x60; notificationId &#x60;:&#x60; the notification id clientId &#x60;:&#x60; the notification client id submissionDate &#x60;:&#x60; the submission date of notification externalReference  &#x60;:&#x60; the external reference used when submitting the notification. Type String string1  &#x60;:&#x60; the business specific metadata string1. Type String string2  &#x60;:&#x60; the business specific metadata string2. Type String string3  &#x60;:&#x60; the business specific metadata string3. Type String string4  &#x60;:&#x60; the business specific metadata string4. Type String string5  &#x60;:&#x60; the business specific metadata string5. Type String date1    &#x60;:&#x60; the business specific metadata date1. Type Date date2    &#x60;:&#x60; the business specific metadata date2. Type Date date3    &#x60;:&#x60; the business specific metadata date3. Type Date date4    &#x60;:&#x60; the business specific metadata date4. Type Date date5    &#x60;:&#x60; the business specific metadata date5. Type Date num1     &#x60;:&#x60; the business specific metadata num1. Type Number num2     &#x60;:&#x60; the business specific metadata num2. Type Number num3     &#x60;:&#x60; the business specific metadata num3. Type Number num4     &#x60;:&#x60; the business specific metadata num4. Type Number num5     &#x60;:&#x60; the business specific metadata num5. Type Number boolean1 &#x60;:&#x60; the business specific metadata boolean1. Type Boolean boolean2 &#x60;:&#x60; the business specific metadata boolean2. Type Boolean boolean3 &#x60;:&#x60; the business specific metadata boolean3. Type Boolean boolean4 &#x60;:&#x60; the business specific metadata boolean4. Type Boolean boolean5 &#x60;:&#x60; the business specific metadata boolean5. Type Boolean (optional)
     * @param  bool $include_bsm Specifies that notification will additionally contain business specific metadata. (optional)
     * @param  bool $include_content_body Specifies that notification will contain email body. (optional)
     * @param  int $skip Skip n-1 elements and start retrieving results from n (part of pagination). &gt;- Only values &gt;&#x3D; 0 are permitted. If value is omited in will be set to 0. (optional)
     * @param  int $max Maximum number of entries to be retrieved by the search. The supported maximum value is 1000 and trying to retrive more then 1000 notifications will result in error. Default value for size is 10. (optional)
     * @param  int $compute_total_results Indicates if the total number of results should be computed and returned or not. (optional)
     * @param  string $order_by Indicates on which field to order results. The same fields as in &#x60;expression&#x60; can be used, with the addition of a special field called &#39;score&#39; used for ordering based on fulltext search score (when fulltext search is available). (optional)
     * @param  string $order_type &#39;ASC&#39; (Default), &#39;DESC&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1NotificationsGetRequest($client_system_key, $client_system_password, $authorization = null, $ecas_ticket = null, $ecas_environment = null, $expression = null, $include_bsm = null, $include_content_body = null, $skip = null, $max = null, $compute_total_results = null, $order_by = null, $order_type = null)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1NotificationsGet'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1NotificationsGet'
            );
        }












        $resourcePath = '/v1/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecas_ticket,
            'ecasTicket', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecas_environment,
            'ecasEnvironment', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expression,
            'expression', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_bsm,
            'includeBSM', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_content_body,
            'includeContentBody', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $compute_total_results,
            'computeTotalResults', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_type,
            'orderType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1NotificationsIdGet
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\Notification|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1NotificationsIdGet($id, $client_system_key, $client_system_password)
    {
        list($response) = $this->v1NotificationsIdGetWithHttpInfo($id, $client_system_key, $client_system_password);
        return $response;
    }

    /**
     * Operation v1NotificationsIdGetWithHttpInfo
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\Notification|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1NotificationsIdGetWithHttpInfo($id, $client_system_key, $client_system_password)
    {
        $request = $this->v1NotificationsIdGetRequest($id, $client_system_key, $client_system_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\Notification' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\Notification' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\Notification', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\Notification';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1NotificationsIdGetAsync
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsIdGetAsync($id, $client_system_key, $client_system_password)
    {
        return $this->v1NotificationsIdGetAsyncWithHttpInfo($id, $client_system_key, $client_system_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1NotificationsIdGetAsyncWithHttpInfo
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsIdGetAsyncWithHttpInfo($id, $client_system_key, $client_system_password)
    {
        $returnType = '\EC\CNS\Client\Model\Notification';
        $request = $this->v1NotificationsIdGetRequest($id, $client_system_key, $client_system_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1NotificationsIdGet'
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1NotificationsIdGetRequest($id, $client_system_key, $client_system_password)
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling v1NotificationsIdGet'
            );
        }

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1NotificationsIdGet'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1NotificationsIdGet'
            );
        }

        $resourcePath = '/v1/notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1NotificationsIdPost
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $read Set Read/Unread status. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket ECAS Ticket. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\SuccessfulResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1NotificationsIdPost($id, $client_system_key, $client_system_password, $read, $authorization = null, $ecas_ticket = null, $ecas_environment = null)
    {
        list($response) = $this->v1NotificationsIdPostWithHttpInfo($id, $client_system_key, $client_system_password, $read, $authorization, $ecas_ticket, $ecas_environment);
        return $response;
    }

    /**
     * Operation v1NotificationsIdPostWithHttpInfo
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $read Set Read/Unread status. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket ECAS Ticket. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\SuccessfulResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1NotificationsIdPostWithHttpInfo($id, $client_system_key, $client_system_password, $read, $authorization = null, $ecas_ticket = null, $ecas_environment = null)
    {
        $request = $this->v1NotificationsIdPostRequest($id, $client_system_key, $client_system_password, $read, $authorization, $ecas_ticket, $ecas_environment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\SuccessfulResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\SuccessfulResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\SuccessfulResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\SuccessfulResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\SuccessfulResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1NotificationsIdPostAsync
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $read Set Read/Unread status. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket ECAS Ticket. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsIdPostAsync($id, $client_system_key, $client_system_password, $read, $authorization = null, $ecas_ticket = null, $ecas_environment = null)
    {
        return $this->v1NotificationsIdPostAsyncWithHttpInfo($id, $client_system_key, $client_system_password, $read, $authorization, $ecas_ticket, $ecas_environment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1NotificationsIdPostAsyncWithHttpInfo
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $read Set Read/Unread status. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket ECAS Ticket. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsIdPostAsyncWithHttpInfo($id, $client_system_key, $client_system_password, $read, $authorization = null, $ecas_ticket = null, $ecas_environment = null)
    {
        $returnType = '\EC\CNS\Client\Model\SuccessfulResult';
        $request = $this->v1NotificationsIdPostRequest($id, $client_system_key, $client_system_password, $read, $authorization, $ecas_ticket, $ecas_environment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1NotificationsIdPost'
     *
     * @param  int $id The unique identifier of the Notification desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  bool $read Set Read/Unread status. (required)
     * @param  string $authorization EuLogin OpenId Acces token sent as \&quot;Bearer AT...\&quot; . Mandatory if ecasTicket is not present. (optional)
     * @param  string $ecas_ticket ECAS Ticket. Mandatory if header accessToken is not present. (optional)
     * @param  string $ecas_environment On which ECAS will be ticket validated (accepted values are ACC or PROD). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1NotificationsIdPostRequest($id, $client_system_key, $client_system_password, $read, $authorization = null, $ecas_ticket = null, $ecas_environment = null)
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling v1NotificationsIdPost'
            );
        }

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1NotificationsIdPost'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1NotificationsIdPost'
            );
        }

        // verify the required parameter 'read' is set
        if ($read === null || (is_array($read) && count($read) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $read when calling v1NotificationsIdPost'
            );
        }




        $resourcePath = '/v1/notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecas_ticket,
            'ecasTicket', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecas_environment,
            'ecasEnvironment', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $read,
            'read', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1NotificationsPost
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\Notification $notification Submitted notification. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\NotificationId|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1NotificationsPost($client_system_key, $client_system_password, $notification)
    {
        list($response) = $this->v1NotificationsPostWithHttpInfo($client_system_key, $client_system_password, $notification);
        return $response;
    }

    /**
     * Operation v1NotificationsPostWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\Notification $notification Submitted notification. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\NotificationId|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1NotificationsPostWithHttpInfo($client_system_key, $client_system_password, $notification)
    {
        $request = $this->v1NotificationsPostRequest($client_system_key, $client_system_password, $notification);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\EC\CNS\Client\Model\NotificationId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\NotificationId' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\NotificationId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\NotificationId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\NotificationId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1NotificationsPostAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\Notification $notification Submitted notification. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsPostAsync($client_system_key, $client_system_password, $notification)
    {
        return $this->v1NotificationsPostAsyncWithHttpInfo($client_system_key, $client_system_password, $notification)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1NotificationsPostAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\Notification $notification Submitted notification. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1NotificationsPostAsyncWithHttpInfo($client_system_key, $client_system_password, $notification)
    {
        $returnType = '\EC\CNS\Client\Model\NotificationId';
        $request = $this->v1NotificationsPostRequest($client_system_key, $client_system_password, $notification);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1NotificationsPost'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\Notification $notification Submitted notification. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1NotificationsPostRequest($client_system_key, $client_system_password, $notification)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1NotificationsPost'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1NotificationsPost'
            );
        }

        // verify the required parameter 'notification' is set
        if ($notification === null || (is_array($notification) && count($notification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification when calling v1NotificationsPost'
            );
        }

        $resourcePath = '/v1/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($notification)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($notification));
            } else {
                $httpBody = $notification;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
