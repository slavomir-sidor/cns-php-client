<?php
/**
 * ClientSystemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CNS REST-API
 *
 * Version v1.2.0 of Corporate Notification System (CNS) REST API.
 *
 * The version of the OpenAPI document: v1.2.0
 * Contact: DIGIT-CNS-SUPPORT@ec.europa.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EC\CNS\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EC\CNS\Client\ApiException;
use EC\CNS\Client\Configuration;
use EC\CNS\Client\HeaderSelector;
use EC\CNS\Client\ObjectSerializer;

/**
 * ClientSystemsApi Class Doc Comment
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientSystemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addWhiteList
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\SuccessfulResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function addWhiteList($client_system_key, $client_system_password, $white_list_request)
    {
        list($response) = $this->addWhiteListWithHttpInfo($client_system_key, $client_system_password, $white_list_request);
        return $response;
    }

    /**
     * Operation addWhiteListWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\SuccessfulResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWhiteListWithHttpInfo($client_system_key, $client_system_password, $white_list_request)
    {
        $request = $this->addWhiteListRequest($client_system_key, $client_system_password, $white_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\SuccessfulResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\SuccessfulResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\SuccessfulResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\SuccessfulResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\SuccessfulResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation addWhiteListAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWhiteListAsync($client_system_key, $client_system_password, $white_list_request)
    {
        return $this->addWhiteListAsyncWithHttpInfo($client_system_key, $client_system_password, $white_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addWhiteListAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWhiteListAsyncWithHttpInfo($client_system_key, $client_system_password, $white_list_request)
    {
        $returnType = '\EC\CNS\Client\Model\SuccessfulResult';
        $request = $this->addWhiteListRequest($client_system_key, $client_system_password, $white_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addWhiteList'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addWhiteListRequest($client_system_key, $client_system_password, $white_list_request)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling addWhiteList'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling addWhiteList'
            );
        }

        // verify the required parameter 'white_list_request' is set
        if ($white_list_request === null || (is_array($white_list_request) && count($white_list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $white_list_request when calling addWhiteList'
            );
        }

        $resourcePath = '/v1/clientSystems/whiteList/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($white_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($white_list_request));
            } else {
                $httpBody = $white_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeWhiteList
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\SuccessfulResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function removeWhiteList($client_system_key, $client_system_password, $white_list_request)
    {
        list($response) = $this->removeWhiteListWithHttpInfo($client_system_key, $client_system_password, $white_list_request);
        return $response;
    }

    /**
     * Operation removeWhiteListWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\SuccessfulResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeWhiteListWithHttpInfo($client_system_key, $client_system_password, $white_list_request)
    {
        $request = $this->removeWhiteListRequest($client_system_key, $client_system_password, $white_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\SuccessfulResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\SuccessfulResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\SuccessfulResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\SuccessfulResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\SuccessfulResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation removeWhiteListAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeWhiteListAsync($client_system_key, $client_system_password, $white_list_request)
    {
        return $this->removeWhiteListAsyncWithHttpInfo($client_system_key, $client_system_password, $white_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeWhiteListAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeWhiteListAsyncWithHttpInfo($client_system_key, $client_system_password, $white_list_request)
    {
        $returnType = '\EC\CNS\Client\Model\SuccessfulResult';
        $request = $this->removeWhiteListRequest($client_system_key, $client_system_password, $white_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeWhiteList'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     * @param  \EC\CNS\Client\Model\WhiteListRequest $white_list_request Smtp addresses list for a Client System. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeWhiteListRequest($client_system_key, $client_system_password, $white_list_request)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling removeWhiteList'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling removeWhiteList'
            );
        }

        // verify the required parameter 'white_list_request' is set
        if ($white_list_request === null || (is_array($white_list_request) && count($white_list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $white_list_request when calling removeWhiteList'
            );
        }

        $resourcePath = '/v1/clientSystems/whiteList/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($white_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($white_list_request));
            } else {
                $httpBody = $white_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ClientSystemsDetailsGet
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\ClientSystemWithDetails|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1ClientSystemsDetailsGet($client_system_key, $client_system_password)
    {
        list($response) = $this->v1ClientSystemsDetailsGetWithHttpInfo($client_system_key, $client_system_password);
        return $response;
    }

    /**
     * Operation v1ClientSystemsDetailsGetWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\ClientSystemWithDetails|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ClientSystemsDetailsGetWithHttpInfo($client_system_key, $client_system_password)
    {
        $request = $this->v1ClientSystemsDetailsGetRequest($client_system_key, $client_system_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\ClientSystemWithDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ClientSystemWithDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ClientSystemWithDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\ClientSystemWithDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ClientSystemWithDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1ClientSystemsDetailsGetAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsDetailsGetAsync($client_system_key, $client_system_password)
    {
        return $this->v1ClientSystemsDetailsGetAsyncWithHttpInfo($client_system_key, $client_system_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ClientSystemsDetailsGetAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsDetailsGetAsyncWithHttpInfo($client_system_key, $client_system_password)
    {
        $returnType = '\EC\CNS\Client\Model\ClientSystemWithDetails';
        $request = $this->v1ClientSystemsDetailsGetRequest($client_system_key, $client_system_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ClientSystemsDetailsGet'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ClientSystemsDetailsGetRequest($client_system_key, $client_system_password)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1ClientSystemsDetailsGet'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1ClientSystemsDetailsGet'
            );
        }

        $resourcePath = '/v1/clientSystems/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ClientSystemsGet
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\ClientSystemSearchResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1ClientSystemsGet($client_system_key, $client_system_password)
    {
        list($response) = $this->v1ClientSystemsGetWithHttpInfo($client_system_key, $client_system_password);
        return $response;
    }

    /**
     * Operation v1ClientSystemsGetWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\ClientSystemSearchResult|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ClientSystemsGetWithHttpInfo($client_system_key, $client_system_password)
    {
        $request = $this->v1ClientSystemsGetRequest($client_system_key, $client_system_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\ClientSystemSearchResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ClientSystemSearchResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ClientSystemSearchResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\ClientSystemSearchResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ClientSystemSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1ClientSystemsGetAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsGetAsync($client_system_key, $client_system_password)
    {
        return $this->v1ClientSystemsGetAsyncWithHttpInfo($client_system_key, $client_system_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ClientSystemsGetAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsGetAsyncWithHttpInfo($client_system_key, $client_system_password)
    {
        $returnType = '\EC\CNS\Client\Model\ClientSystemSearchResult';
        $request = $this->v1ClientSystemsGetRequest($client_system_key, $client_system_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ClientSystemsGet'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ClientSystemsGetRequest($client_system_key, $client_system_password)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1ClientSystemsGet'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1ClientSystemsGet'
            );
        }

        $resourcePath = '/v1/clientSystems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ClientSystemsIdGet
     *
     * @param  int $id The unique identifier of the ClientSystem desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\ClientSystem|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1ClientSystemsIdGet($id, $client_system_key, $client_system_password)
    {
        list($response) = $this->v1ClientSystemsIdGetWithHttpInfo($id, $client_system_key, $client_system_password);
        return $response;
    }

    /**
     * Operation v1ClientSystemsIdGetWithHttpInfo
     *
     * @param  int $id The unique identifier of the ClientSystem desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\ClientSystem|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ClientSystemsIdGetWithHttpInfo($id, $client_system_key, $client_system_password)
    {
        $request = $this->v1ClientSystemsIdGetRequest($id, $client_system_key, $client_system_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\ClientSystem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ClientSystem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ClientSystem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\ClientSystem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ClientSystem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1ClientSystemsIdGetAsync
     *
     * @param  int $id The unique identifier of the ClientSystem desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsIdGetAsync($id, $client_system_key, $client_system_password)
    {
        return $this->v1ClientSystemsIdGetAsyncWithHttpInfo($id, $client_system_key, $client_system_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ClientSystemsIdGetAsyncWithHttpInfo
     *
     * @param  int $id The unique identifier of the ClientSystem desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsIdGetAsyncWithHttpInfo($id, $client_system_key, $client_system_password)
    {
        $returnType = '\EC\CNS\Client\Model\ClientSystem';
        $request = $this->v1ClientSystemsIdGetRequest($id, $client_system_key, $client_system_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ClientSystemsIdGet'
     *
     * @param  int $id The unique identifier of the ClientSystem desired. (required)
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ClientSystemsIdGetRequest($id, $client_system_key, $client_system_password)
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling v1ClientSystemsIdGet'
            );
        }

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1ClientSystemsIdGet'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1ClientSystemsIdGet'
            );
        }

        $resourcePath = '/v1/clientSystems/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ClientSystemsWhiteListGet
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EC\CNS\Client\Model\WhiteListResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse
     */
    public function v1ClientSystemsWhiteListGet($client_system_key, $client_system_password)
    {
        list($response) = $this->v1ClientSystemsWhiteListGetWithHttpInfo($client_system_key, $client_system_password);
        return $response;
    }

    /**
     * Operation v1ClientSystemsWhiteListGetWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \EC\CNS\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EC\CNS\Client\Model\WhiteListResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse|\EC\CNS\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ClientSystemsWhiteListGetWithHttpInfo($client_system_key, $client_system_password)
    {
        $request = $this->v1ClientSystemsWhiteListGetRequest($client_system_key, $client_system_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\EC\CNS\Client\Model\WhiteListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\WhiteListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\WhiteListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\EC\CNS\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EC\CNS\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EC\CNS\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\EC\CNS\Client\Model\WhiteListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\WhiteListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EC\CNS\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation v1ClientSystemsWhiteListGetAsync
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsWhiteListGetAsync($client_system_key, $client_system_password)
    {
        return $this->v1ClientSystemsWhiteListGetAsyncWithHttpInfo($client_system_key, $client_system_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ClientSystemsWhiteListGetAsyncWithHttpInfo
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ClientSystemsWhiteListGetAsyncWithHttpInfo($client_system_key, $client_system_password)
    {
        $returnType = '\EC\CNS\Client\Model\WhiteListResponse';
        $request = $this->v1ClientSystemsWhiteListGetRequest($client_system_key, $client_system_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ClientSystemsWhiteListGet'
     *
     * @param  string $client_system_key The unique client system key identifier. (required)
     * @param  string $client_system_password Client System Password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ClientSystemsWhiteListGetRequest($client_system_key, $client_system_password)
    {

        // verify the required parameter 'client_system_key' is set
        if ($client_system_key === null || (is_array($client_system_key) && count($client_system_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_key when calling v1ClientSystemsWhiteListGet'
            );
        }

        // verify the required parameter 'client_system_password' is set
        if ($client_system_password === null || (is_array($client_system_password) && count($client_system_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_system_password when calling v1ClientSystemsWhiteListGet'
            );
        }

        $resourcePath = '/v1/clientSystems/whiteList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_key,
            'clientSystemKey', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_system_password,
            'clientSystemPassword', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
