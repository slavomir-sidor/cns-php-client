<?php
/**
 * BusinessSpecificMetadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CNS REST-API
 *
 * Version v1.2.0 of Corporate Notification System (CNS) REST API.
 *
 * The version of the OpenAPI document: v1.2.0
 * Contact: DIGIT-CNS-SUPPORT@ec.europa.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EC\CNS\Client\Model;

use \ArrayAccess;
use \EC\CNS\Client\ObjectSerializer;

/**
 * BusinessSpecificMetadata Class Doc Comment
 *
 * @category Class
 * @description Optional business specific metadata. Used by client applications to store/retrieve information meaningful for them and to search for notification based on them. It will be up to the client application to know how to interpret these generic fields. Supported values include string, datetime, integer of boolean data. Maximum 5 values per each of supported types is allowed.
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BusinessSpecificMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BusinessSpecificMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'string1' => 'string',
        'string2' => 'string',
        'string3' => 'string',
        'string4' => 'string',
        'string5' => 'string',
        'date1' => '\DateTime',
        'date2' => '\DateTime',
        'date3' => '\DateTime',
        'date4' => '\DateTime',
        'date5' => '\DateTime',
        'num1' => 'int',
        'num2' => 'int',
        'num3' => 'int',
        'num4' => 'int',
        'num5' => 'int',
        'boolean1' => 'bool',
        'boolean2' => 'bool',
        'boolean3' => 'bool',
        'boolean4' => 'bool',
        'boolean5' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'string1' => null,
        'string2' => null,
        'string3' => null,
        'string4' => null,
        'string5' => null,
        'date1' => 'date-time',
        'date2' => 'date-time',
        'date3' => 'date-time',
        'date4' => 'date-time',
        'date5' => 'date-time',
        'num1' => 'int64',
        'num2' => 'int64',
        'num3' => 'int64',
        'num4' => 'int64',
        'num5' => 'int64',
        'boolean1' => null,
        'boolean2' => null,
        'boolean3' => null,
        'boolean4' => null,
        'boolean5' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'string1' => false,
		'string2' => false,
		'string3' => false,
		'string4' => false,
		'string5' => false,
		'date1' => false,
		'date2' => false,
		'date3' => false,
		'date4' => false,
		'date5' => false,
		'num1' => false,
		'num2' => false,
		'num3' => false,
		'num4' => false,
		'num5' => false,
		'boolean1' => false,
		'boolean2' => false,
		'boolean3' => false,
		'boolean4' => false,
		'boolean5' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'string1' => 'string1',
        'string2' => 'string2',
        'string3' => 'string3',
        'string4' => 'string4',
        'string5' => 'string5',
        'date1' => 'date1',
        'date2' => 'date2',
        'date3' => 'date3',
        'date4' => 'date4',
        'date5' => 'date5',
        'num1' => 'num1',
        'num2' => 'num2',
        'num3' => 'num3',
        'num4' => 'num4',
        'num5' => 'num5',
        'boolean1' => 'boolean1',
        'boolean2' => 'boolean2',
        'boolean3' => 'boolean3',
        'boolean4' => 'boolean4',
        'boolean5' => 'boolean5'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'string1' => 'setString1',
        'string2' => 'setString2',
        'string3' => 'setString3',
        'string4' => 'setString4',
        'string5' => 'setString5',
        'date1' => 'setDate1',
        'date2' => 'setDate2',
        'date3' => 'setDate3',
        'date4' => 'setDate4',
        'date5' => 'setDate5',
        'num1' => 'setNum1',
        'num2' => 'setNum2',
        'num3' => 'setNum3',
        'num4' => 'setNum4',
        'num5' => 'setNum5',
        'boolean1' => 'setBoolean1',
        'boolean2' => 'setBoolean2',
        'boolean3' => 'setBoolean3',
        'boolean4' => 'setBoolean4',
        'boolean5' => 'setBoolean5'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'string1' => 'getString1',
        'string2' => 'getString2',
        'string3' => 'getString3',
        'string4' => 'getString4',
        'string5' => 'getString5',
        'date1' => 'getDate1',
        'date2' => 'getDate2',
        'date3' => 'getDate3',
        'date4' => 'getDate4',
        'date5' => 'getDate5',
        'num1' => 'getNum1',
        'num2' => 'getNum2',
        'num3' => 'getNum3',
        'num4' => 'getNum4',
        'num5' => 'getNum5',
        'boolean1' => 'getBoolean1',
        'boolean2' => 'getBoolean2',
        'boolean3' => 'getBoolean3',
        'boolean4' => 'getBoolean4',
        'boolean5' => 'getBoolean5'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('string1', $data ?? [], null);
        $this->setIfExists('string2', $data ?? [], null);
        $this->setIfExists('string3', $data ?? [], null);
        $this->setIfExists('string4', $data ?? [], null);
        $this->setIfExists('string5', $data ?? [], null);
        $this->setIfExists('date1', $data ?? [], null);
        $this->setIfExists('date2', $data ?? [], null);
        $this->setIfExists('date3', $data ?? [], null);
        $this->setIfExists('date4', $data ?? [], null);
        $this->setIfExists('date5', $data ?? [], null);
        $this->setIfExists('num1', $data ?? [], null);
        $this->setIfExists('num2', $data ?? [], null);
        $this->setIfExists('num3', $data ?? [], null);
        $this->setIfExists('num4', $data ?? [], null);
        $this->setIfExists('num5', $data ?? [], null);
        $this->setIfExists('boolean1', $data ?? [], null);
        $this->setIfExists('boolean2', $data ?? [], null);
        $this->setIfExists('boolean3', $data ?? [], null);
        $this->setIfExists('boolean4', $data ?? [], null);
        $this->setIfExists('boolean5', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets string1
     *
     * @return string|null
     */
    public function getString1()
    {
        return $this->container['string1'];
    }

    /**
     * Sets string1
     *
     * @param string|null $string1 Business specific string data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setString1($string1)
    {

        if (is_null($string1)) {
            throw new \InvalidArgumentException('non-nullable string1 cannot be null');
        }

        $this->container['string1'] = $string1;

        return $this;
    }

    /**
     * Gets string2
     *
     * @return string|null
     */
    public function getString2()
    {
        return $this->container['string2'];
    }

    /**
     * Sets string2
     *
     * @param string|null $string2 Business specific string data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setString2($string2)
    {

        if (is_null($string2)) {
            throw new \InvalidArgumentException('non-nullable string2 cannot be null');
        }

        $this->container['string2'] = $string2;

        return $this;
    }

    /**
     * Gets string3
     *
     * @return string|null
     */
    public function getString3()
    {
        return $this->container['string3'];
    }

    /**
     * Sets string3
     *
     * @param string|null $string3 Business specific string data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setString3($string3)
    {

        if (is_null($string3)) {
            throw new \InvalidArgumentException('non-nullable string3 cannot be null');
        }

        $this->container['string3'] = $string3;

        return $this;
    }

    /**
     * Gets string4
     *
     * @return string|null
     */
    public function getString4()
    {
        return $this->container['string4'];
    }

    /**
     * Sets string4
     *
     * @param string|null $string4 Business specific string data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setString4($string4)
    {

        if (is_null($string4)) {
            throw new \InvalidArgumentException('non-nullable string4 cannot be null');
        }

        $this->container['string4'] = $string4;

        return $this;
    }

    /**
     * Gets string5
     *
     * @return string|null
     */
    public function getString5()
    {
        return $this->container['string5'];
    }

    /**
     * Sets string5
     *
     * @param string|null $string5 Business specific string data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setString5($string5)
    {

        if (is_null($string5)) {
            throw new \InvalidArgumentException('non-nullable string5 cannot be null');
        }

        $this->container['string5'] = $string5;

        return $this;
    }

    /**
     * Gets date1
     *
     * @return \DateTime|null
     */
    public function getDate1()
    {
        return $this->container['date1'];
    }

    /**
     * Sets date1
     *
     * @param \DateTime|null $date1 Business specific datetime data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setDate1($date1)
    {

        if (is_null($date1)) {
            throw new \InvalidArgumentException('non-nullable date1 cannot be null');
        }

        $this->container['date1'] = $date1;

        return $this;
    }

    /**
     * Gets date2
     *
     * @return \DateTime|null
     */
    public function getDate2()
    {
        return $this->container['date2'];
    }

    /**
     * Sets date2
     *
     * @param \DateTime|null $date2 Business specific datetime data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setDate2($date2)
    {

        if (is_null($date2)) {
            throw new \InvalidArgumentException('non-nullable date2 cannot be null');
        }

        $this->container['date2'] = $date2;

        return $this;
    }

    /**
     * Gets date3
     *
     * @return \DateTime|null
     */
    public function getDate3()
    {
        return $this->container['date3'];
    }

    /**
     * Sets date3
     *
     * @param \DateTime|null $date3 Business specific datetime data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setDate3($date3)
    {

        if (is_null($date3)) {
            throw new \InvalidArgumentException('non-nullable date3 cannot be null');
        }

        $this->container['date3'] = $date3;

        return $this;
    }

    /**
     * Gets date4
     *
     * @return \DateTime|null
     */
    public function getDate4()
    {
        return $this->container['date4'];
    }

    /**
     * Sets date4
     *
     * @param \DateTime|null $date4 Business specific datetime data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setDate4($date4)
    {

        if (is_null($date4)) {
            throw new \InvalidArgumentException('non-nullable date4 cannot be null');
        }

        $this->container['date4'] = $date4;

        return $this;
    }

    /**
     * Gets date5
     *
     * @return \DateTime|null
     */
    public function getDate5()
    {
        return $this->container['date5'];
    }

    /**
     * Sets date5
     *
     * @param \DateTime|null $date5 Business specific datetime data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setDate5($date5)
    {

        if (is_null($date5)) {
            throw new \InvalidArgumentException('non-nullable date5 cannot be null');
        }

        $this->container['date5'] = $date5;

        return $this;
    }

    /**
     * Gets num1
     *
     * @return int|null
     */
    public function getNum1()
    {
        return $this->container['num1'];
    }

    /**
     * Sets num1
     *
     * @param int|null $num1 Business specific long data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setNum1($num1)
    {

        if (is_null($num1)) {
            throw new \InvalidArgumentException('non-nullable num1 cannot be null');
        }

        $this->container['num1'] = $num1;

        return $this;
    }

    /**
     * Gets num2
     *
     * @return int|null
     */
    public function getNum2()
    {
        return $this->container['num2'];
    }

    /**
     * Sets num2
     *
     * @param int|null $num2 Business specific long data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setNum2($num2)
    {

        if (is_null($num2)) {
            throw new \InvalidArgumentException('non-nullable num2 cannot be null');
        }

        $this->container['num2'] = $num2;

        return $this;
    }

    /**
     * Gets num3
     *
     * @return int|null
     */
    public function getNum3()
    {
        return $this->container['num3'];
    }

    /**
     * Sets num3
     *
     * @param int|null $num3 Business specific long data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setNum3($num3)
    {

        if (is_null($num3)) {
            throw new \InvalidArgumentException('non-nullable num3 cannot be null');
        }

        $this->container['num3'] = $num3;

        return $this;
    }

    /**
     * Gets num4
     *
     * @return int|null
     */
    public function getNum4()
    {
        return $this->container['num4'];
    }

    /**
     * Sets num4
     *
     * @param int|null $num4 Business specific long data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setNum4($num4)
    {

        if (is_null($num4)) {
            throw new \InvalidArgumentException('non-nullable num4 cannot be null');
        }

        $this->container['num4'] = $num4;

        return $this;
    }

    /**
     * Gets num5
     *
     * @return int|null
     */
    public function getNum5()
    {
        return $this->container['num5'];
    }

    /**
     * Sets num5
     *
     * @param int|null $num5 Business specific long data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setNum5($num5)
    {

        if (is_null($num5)) {
            throw new \InvalidArgumentException('non-nullable num5 cannot be null');
        }

        $this->container['num5'] = $num5;

        return $this;
    }

    /**
     * Gets boolean1
     *
     * @return bool|null
     */
    public function getBoolean1()
    {
        return $this->container['boolean1'];
    }

    /**
     * Sets boolean1
     *
     * @param bool|null $boolean1 Business specific boolean data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setBoolean1($boolean1)
    {

        if (is_null($boolean1)) {
            throw new \InvalidArgumentException('non-nullable boolean1 cannot be null');
        }

        $this->container['boolean1'] = $boolean1;

        return $this;
    }

    /**
     * Gets boolean2
     *
     * @return bool|null
     */
    public function getBoolean2()
    {
        return $this->container['boolean2'];
    }

    /**
     * Sets boolean2
     *
     * @param bool|null $boolean2 Business specific boolean data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setBoolean2($boolean2)
    {

        if (is_null($boolean2)) {
            throw new \InvalidArgumentException('non-nullable boolean2 cannot be null');
        }

        $this->container['boolean2'] = $boolean2;

        return $this;
    }

    /**
     * Gets boolean3
     *
     * @return bool|null
     */
    public function getBoolean3()
    {
        return $this->container['boolean3'];
    }

    /**
     * Sets boolean3
     *
     * @param bool|null $boolean3 Business specific boolean data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setBoolean3($boolean3)
    {

        if (is_null($boolean3)) {
            throw new \InvalidArgumentException('non-nullable boolean3 cannot be null');
        }

        $this->container['boolean3'] = $boolean3;

        return $this;
    }

    /**
     * Gets boolean4
     *
     * @return bool|null
     */
    public function getBoolean4()
    {
        return $this->container['boolean4'];
    }

    /**
     * Sets boolean4
     *
     * @param bool|null $boolean4 Business specific boolean data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setBoolean4($boolean4)
    {

        if (is_null($boolean4)) {
            throw new \InvalidArgumentException('non-nullable boolean4 cannot be null');
        }

        $this->container['boolean4'] = $boolean4;

        return $this;
    }

    /**
     * Gets boolean5
     *
     * @return bool|null
     */
    public function getBoolean5()
    {
        return $this->container['boolean5'];
    }

    /**
     * Sets boolean5
     *
     * @param bool|null $boolean5 Business specific boolean data regarding notification customized by client applications.
     *
     * @return self
     */
    public function setBoolean5($boolean5)
    {

        if (is_null($boolean5)) {
            throw new \InvalidArgumentException('non-nullable boolean5 cannot be null');
        }

        $this->container['boolean5'] = $boolean5;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


