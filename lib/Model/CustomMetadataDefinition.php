<?php
/**
 * CustomMetadataDefinition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CNS REST-API
 *
 * Version v1.2.0 of Corporate Notification System (CNS) REST API.
 *
 * The version of the OpenAPI document: v1.2.0
 * Contact: DIGIT-CNS-SUPPORT@ec.europa.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EC\CNS\Client\Model;

use \ArrayAccess;
use \EC\CNS\Client\ObjectSerializer;

/**
 * CustomMetadataDefinition Class Doc Comment
 *
 * @category Class
 * @description Some notification groups can have special fields that are set by the user and managed by their client systems.
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomMetadataDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomMetadataDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'label_en' => 'string',
        'description_en' => 'string',
        'label_fr' => 'string',
        'description_fr' => 'string',
        'type' => 'string',
        'defult_allowed_value' => '\EC\CNS\Client\Model\AllowedValue',
        'allowed_value' => '\EC\CNS\Client\Model\AllowedValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'label_en' => null,
        'description_en' => null,
        'label_fr' => null,
        'description_fr' => null,
        'type' => null,
        'defult_allowed_value' => null,
        'allowed_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'label_en' => false,
		'description_en' => false,
		'label_fr' => false,
		'description_fr' => false,
		'type' => false,
		'defult_allowed_value' => false,
		'allowed_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label_en' => 'labelEn',
        'description_en' => 'descriptionEn',
        'label_fr' => 'labelFr',
        'description_fr' => 'descriptionFr',
        'type' => 'type',
        'defult_allowed_value' => 'defultAllowedValue',
        'allowed_value' => 'allowedValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label_en' => 'setLabelEn',
        'description_en' => 'setDescriptionEn',
        'label_fr' => 'setLabelFr',
        'description_fr' => 'setDescriptionFr',
        'type' => 'setType',
        'defult_allowed_value' => 'setDefultAllowedValue',
        'allowed_value' => 'setAllowedValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label_en' => 'getLabelEn',
        'description_en' => 'getDescriptionEn',
        'label_fr' => 'getLabelFr',
        'description_fr' => 'getDescriptionFr',
        'type' => 'getType',
        'defult_allowed_value' => 'getDefultAllowedValue',
        'allowed_value' => 'getAllowedValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_INT = 'INT';
    public const TYPE_STRING = 'STRING';
    public const TYPE_DATE = 'DATE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INT,
            self::TYPE_STRING,
            self::TYPE_DATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('label_en', $data ?? [], null);
        $this->setIfExists('description_en', $data ?? [], null);
        $this->setIfExists('label_fr', $data ?? [], null);
        $this->setIfExists('description_fr', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('defult_allowed_value', $data ?? [], null);
        $this->setIfExists('allowed_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label_en
     *
     * @return string|null
     */
    public function getLabelEn()
    {
        return $this->container['label_en'];
    }

    /**
     * Sets label_en
     *
     * @param string|null $label_en label_en
     *
     * @return self
     */
    public function setLabelEn($label_en)
    {

        if (is_null($label_en)) {
            throw new \InvalidArgumentException('non-nullable label_en cannot be null');
        }

        $this->container['label_en'] = $label_en;

        return $this;
    }

    /**
     * Gets description_en
     *
     * @return string|null
     */
    public function getDescriptionEn()
    {
        return $this->container['description_en'];
    }

    /**
     * Sets description_en
     *
     * @param string|null $description_en description_en
     *
     * @return self
     */
    public function setDescriptionEn($description_en)
    {

        if (is_null($description_en)) {
            throw new \InvalidArgumentException('non-nullable description_en cannot be null');
        }

        $this->container['description_en'] = $description_en;

        return $this;
    }

    /**
     * Gets label_fr
     *
     * @return string|null
     */
    public function getLabelFr()
    {
        return $this->container['label_fr'];
    }

    /**
     * Sets label_fr
     *
     * @param string|null $label_fr label_fr
     *
     * @return self
     */
    public function setLabelFr($label_fr)
    {

        if (is_null($label_fr)) {
            throw new \InvalidArgumentException('non-nullable label_fr cannot be null');
        }

        $this->container['label_fr'] = $label_fr;

        return $this;
    }

    /**
     * Gets description_fr
     *
     * @return string|null
     */
    public function getDescriptionFr()
    {
        return $this->container['description_fr'];
    }

    /**
     * Sets description_fr
     *
     * @param string|null $description_fr description_fr
     *
     * @return self
     */
    public function setDescriptionFr($description_fr)
    {

        if (is_null($description_fr)) {
            throw new \InvalidArgumentException('non-nullable description_fr cannot be null');
        }

        $this->container['description_fr'] = $description_fr;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets defult_allowed_value
     *
     * @return \EC\CNS\Client\Model\AllowedValue|null
     */
    public function getDefultAllowedValue()
    {
        return $this->container['defult_allowed_value'];
    }

    /**
     * Sets defult_allowed_value
     *
     * @param \EC\CNS\Client\Model\AllowedValue|null $defult_allowed_value defult_allowed_value
     *
     * @return self
     */
    public function setDefultAllowedValue($defult_allowed_value)
    {

        if (is_null($defult_allowed_value)) {
            throw new \InvalidArgumentException('non-nullable defult_allowed_value cannot be null');
        }

        $this->container['defult_allowed_value'] = $defult_allowed_value;

        return $this;
    }

    /**
     * Gets allowed_value
     *
     * @return \EC\CNS\Client\Model\AllowedValue[]|null
     */
    public function getAllowedValue()
    {
        return $this->container['allowed_value'];
    }

    /**
     * Sets allowed_value
     *
     * @param \EC\CNS\Client\Model\AllowedValue[]|null $allowed_value allowed_value
     *
     * @return self
     */
    public function setAllowedValue($allowed_value)
    {

        if (is_null($allowed_value)) {
            throw new \InvalidArgumentException('non-nullable allowed_value cannot be null');
        }

        $this->container['allowed_value'] = $allowed_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


