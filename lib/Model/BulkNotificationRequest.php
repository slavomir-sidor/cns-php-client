<?php
/**
 * BulkNotificationRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CNS REST-API
 *
 * Version v1.2.0 of Corporate Notification System (CNS) REST API.
 *
 * The version of the OpenAPI document: v1.2.0
 * Contact: DIGIT-CNS-SUPPORT@ec.europa.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EC\CNS\Client\Model;

use \ArrayAccess;
use \EC\CNS\Client\ObjectSerializer;

/**
 * BulkNotificationRequest Class Doc Comment
 *
 * @category Class
 * @description Data for submitting a bulk notification.
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BulkNotificationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BulkNotificationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'notification_group_code' => 'string',
        'recipients' => '\EC\CNS\Client\Model\BulkRecipient[]',
        'default_content' => '\EC\CNS\Client\Model\ContentTranslation',
        'alternative_content_translations' => '\EC\CNS\Client\Model\ContentTranslation[]',
        'task_deadline' => '\DateTime',
        'planned_date' => '\DateTime',
        'external_reference' => 'string',
        'business_specific_metadata' => '\EC\CNS\Client\Model\BusinessSpecificMetadata',
        'important' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'notification_group_code' => null,
        'recipients' => null,
        'default_content' => null,
        'alternative_content_translations' => null,
        'task_deadline' => 'date-time',
        'planned_date' => 'date-time',
        'external_reference' => null,
        'business_specific_metadata' => null,
        'important' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'notification_group_code' => false,
		'recipients' => false,
		'default_content' => false,
		'alternative_content_translations' => false,
		'task_deadline' => false,
		'planned_date' => false,
		'external_reference' => false,
		'business_specific_metadata' => false,
		'important' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notification_group_code' => 'notificationGroupCode',
        'recipients' => 'recipients',
        'default_content' => 'defaultContent',
        'alternative_content_translations' => 'alternativeContentTranslations',
        'task_deadline' => 'taskDeadline',
        'planned_date' => 'plannedDate',
        'external_reference' => 'externalReference',
        'business_specific_metadata' => 'businessSpecificMetadata',
        'important' => 'important'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notification_group_code' => 'setNotificationGroupCode',
        'recipients' => 'setRecipients',
        'default_content' => 'setDefaultContent',
        'alternative_content_translations' => 'setAlternativeContentTranslations',
        'task_deadline' => 'setTaskDeadline',
        'planned_date' => 'setPlannedDate',
        'external_reference' => 'setExternalReference',
        'business_specific_metadata' => 'setBusinessSpecificMetadata',
        'important' => 'setImportant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notification_group_code' => 'getNotificationGroupCode',
        'recipients' => 'getRecipients',
        'default_content' => 'getDefaultContent',
        'alternative_content_translations' => 'getAlternativeContentTranslations',
        'task_deadline' => 'getTaskDeadline',
        'planned_date' => 'getPlannedDate',
        'external_reference' => 'getExternalReference',
        'business_specific_metadata' => 'getBusinessSpecificMetadata',
        'important' => 'getImportant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('notification_group_code', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('default_content', $data ?? [], null);
        $this->setIfExists('alternative_content_translations', $data ?? [], null);
        $this->setIfExists('task_deadline', $data ?? [], null);
        $this->setIfExists('planned_date', $data ?? [], null);
        $this->setIfExists('external_reference', $data ?? [], null);
        $this->setIfExists('business_specific_metadata', $data ?? [], null);
        $this->setIfExists('important', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['notification_group_code'] === null) {
            $invalidProperties[] = "'notification_group_code' can't be null";
        }
        if ($this->container['recipients'] === null) {
            $invalidProperties[] = "'recipients' can't be null";
        }
        if ($this->container['default_content'] === null) {
            $invalidProperties[] = "'default_content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets notification_group_code
     *
     * @return string
     */
    public function getNotificationGroupCode()
    {
        return $this->container['notification_group_code'];
    }

    /**
     * Sets notification_group_code
     *
     * @param string $notification_group_code The notification group to which this notification belongs. The notification group decides certain characteristics of the notification   (if it's compulsory or not, if it can be part of the daily digest or not, it's type, etc.).
     *
     * @return self
     */
    public function setNotificationGroupCode($notification_group_code)
    {

        if (is_null($notification_group_code)) {
            throw new \InvalidArgumentException('non-nullable notification_group_code cannot be null');
        }

        $this->container['notification_group_code'] = $notification_group_code;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \EC\CNS\Client\Model\BulkRecipient[]
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \EC\CNS\Client\Model\BulkRecipient[] $recipients List of bulk recipients. At least one recipient is expected and no more than 100;
     *
     * @return self
     */
    public function setRecipients($recipients)
    {

        if (is_null($recipients)) {
            throw new \InvalidArgumentException('non-nullable recipients cannot be null');
        }

        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets default_content
     *
     * @return \EC\CNS\Client\Model\ContentTranslation
     */
    public function getDefaultContent()
    {
        return $this->container['default_content'];
    }

    /**
     * Sets default_content
     *
     * @param \EC\CNS\Client\Model\ContentTranslation $default_content default_content
     *
     * @return self
     */
    public function setDefaultContent($default_content)
    {

        if (is_null($default_content)) {
            throw new \InvalidArgumentException('non-nullable default_content cannot be null');
        }

        $this->container['default_content'] = $default_content;

        return $this;
    }

    /**
     * Gets alternative_content_translations
     *
     * @return \EC\CNS\Client\Model\ContentTranslation[]|null
     */
    public function getAlternativeContentTranslations()
    {
        return $this->container['alternative_content_translations'];
    }

    /**
     * Sets alternative_content_translations
     *
     * @param \EC\CNS\Client\Model\ContentTranslation[]|null $alternative_content_translations Optionally, the content translated in other languages.
     *
     * @return self
     */
    public function setAlternativeContentTranslations($alternative_content_translations)
    {

        if (is_null($alternative_content_translations)) {
            throw new \InvalidArgumentException('non-nullable alternative_content_translations cannot be null');
        }

        $this->container['alternative_content_translations'] = $alternative_content_translations;

        return $this;
    }

    /**
     * Gets task_deadline
     *
     * @return \DateTime|null
     */
    public function getTaskDeadline()
    {
        return $this->container['task_deadline'];
    }

    /**
     * Sets task_deadline
     *
     * @param \DateTime|null $task_deadline Optional task deadline (applies only to notifications of type task).
     *
     * @return self
     */
    public function setTaskDeadline($task_deadline)
    {

        if (is_null($task_deadline)) {
            throw new \InvalidArgumentException('non-nullable task_deadline cannot be null');
        }

        $this->container['task_deadline'] = $task_deadline;

        return $this;
    }

    /**
     * Gets planned_date
     *
     * @return \DateTime|null
     */
    public function getPlannedDate()
    {
        return $this->container['planned_date'];
    }

    /**
     * Sets planned_date
     *
     * @param \DateTime|null $planned_date Optional planned date of delivery.
     *
     * @return self
     */
    public function setPlannedDate($planned_date)
    {

        if (is_null($planned_date)) {
            throw new \InvalidArgumentException('non-nullable planned_date cannot be null');
        }

        $this->container['planned_date'] = $planned_date;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string|null
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string|null $external_reference Optional value that uniquely identifies the notification in the client system.
     *
     * @return self
     */
    public function setExternalReference($external_reference)
    {

        if (is_null($external_reference)) {
            throw new \InvalidArgumentException('non-nullable external_reference cannot be null');
        }

        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets business_specific_metadata
     *
     * @return \EC\CNS\Client\Model\BusinessSpecificMetadata|null
     */
    public function getBusinessSpecificMetadata()
    {
        return $this->container['business_specific_metadata'];
    }

    /**
     * Sets business_specific_metadata
     *
     * @param \EC\CNS\Client\Model\BusinessSpecificMetadata|null $business_specific_metadata business_specific_metadata
     *
     * @return self
     */
    public function setBusinessSpecificMetadata($business_specific_metadata)
    {

        if (is_null($business_specific_metadata)) {
            throw new \InvalidArgumentException('non-nullable business_specific_metadata cannot be null');
        }

        $this->container['business_specific_metadata'] = $business_specific_metadata;

        return $this;
    }

    /**
     * Gets important
     *
     * @return bool|null
     */
    public function getImportant()
    {
        return $this->container['important'];
    }

    /**
     * Sets important
     *
     * @param bool|null $important Optional flag to set send email as important to indicate that email needs the recipient attention quickly.
     *
     * @return self
     */
    public function setImportant($important)
    {

        if (is_null($important)) {
            throw new \InvalidArgumentException('non-nullable important cannot be null');
        }

        $this->container['important'] = $important;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


