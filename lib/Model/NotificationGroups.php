<?php
/**
 * NotificationGroups
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CNS REST-API
 *
 * Version v1.2.0 of Corporate Notification System (CNS) REST API.
 *
 * The version of the OpenAPI document: v1.2.0
 * Contact: DIGIT-CNS-SUPPORT@ec.europa.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EC\CNS\Client\Model;

use \ArrayAccess;
use \EC\CNS\Client\ObjectSerializer;

/**
 * NotificationGroups Class Doc Comment
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NotificationGroups implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NotificationGroups';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'notification_group_code' => 'string',
        'notification_group_name' => 'string',
        'default_subscribed' => 'bool',
        'allow_user_unsubscribed' => 'bool',
        'support_attachments' => 'bool',
        'support_multiple_recipients' => 'bool',
        'support_daily_digest' => 'bool',
        'support_translations' => 'bool',
        'notification_type' => 'string',
        'subscription_type' => 'string',
        'custom_metadata' => '\EC\CNS\Client\Model\CustomMetadataDefinition[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'notification_group_code' => null,
        'notification_group_name' => null,
        'default_subscribed' => null,
        'allow_user_unsubscribed' => null,
        'support_attachments' => null,
        'support_multiple_recipients' => null,
        'support_daily_digest' => null,
        'support_translations' => null,
        'notification_type' => null,
        'subscription_type' => null,
        'custom_metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'notification_group_code' => false,
		'notification_group_name' => false,
		'default_subscribed' => false,
		'allow_user_unsubscribed' => false,
		'support_attachments' => false,
		'support_multiple_recipients' => false,
		'support_daily_digest' => false,
		'support_translations' => false,
		'notification_type' => false,
		'subscription_type' => false,
		'custom_metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notification_group_code' => 'notificationGroupCode',
        'notification_group_name' => 'notificationGroupName',
        'default_subscribed' => 'defaultSubscribed',
        'allow_user_unsubscribed' => 'allowUserUnsubscribed',
        'support_attachments' => 'supportAttachments',
        'support_multiple_recipients' => 'supportMultipleRecipients',
        'support_daily_digest' => 'supportDailyDigest',
        'support_translations' => 'supportTranslations',
        'notification_type' => 'notificationType',
        'subscription_type' => 'subscriptionType',
        'custom_metadata' => 'customMetadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notification_group_code' => 'setNotificationGroupCode',
        'notification_group_name' => 'setNotificationGroupName',
        'default_subscribed' => 'setDefaultSubscribed',
        'allow_user_unsubscribed' => 'setAllowUserUnsubscribed',
        'support_attachments' => 'setSupportAttachments',
        'support_multiple_recipients' => 'setSupportMultipleRecipients',
        'support_daily_digest' => 'setSupportDailyDigest',
        'support_translations' => 'setSupportTranslations',
        'notification_type' => 'setNotificationType',
        'subscription_type' => 'setSubscriptionType',
        'custom_metadata' => 'setCustomMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notification_group_code' => 'getNotificationGroupCode',
        'notification_group_name' => 'getNotificationGroupName',
        'default_subscribed' => 'getDefaultSubscribed',
        'allow_user_unsubscribed' => 'getAllowUserUnsubscribed',
        'support_attachments' => 'getSupportAttachments',
        'support_multiple_recipients' => 'getSupportMultipleRecipients',
        'support_daily_digest' => 'getSupportDailyDigest',
        'support_translations' => 'getSupportTranslations',
        'notification_type' => 'getNotificationType',
        'subscription_type' => 'getSubscriptionType',
        'custom_metadata' => 'getCustomMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NOTIFICATION_TYPE_MESSAGE = 'MESSAGE';
    public const NOTIFICATION_TYPE_TASK = 'TASK';
    public const NOTIFICATION_TYPE_REPORT = 'REPORT';
    public const SUBSCRIPTION_TYPE_INSTANT = 'INSTANT';
    public const SUBSCRIPTION_TYPE_DAILY_DIGEST = 'DAILY_DIGEST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNotificationTypeAllowableValues()
    {
        return [
            self::NOTIFICATION_TYPE_MESSAGE,
            self::NOTIFICATION_TYPE_TASK,
            self::NOTIFICATION_TYPE_REPORT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriptionTypeAllowableValues()
    {
        return [
            self::SUBSCRIPTION_TYPE_INSTANT,
            self::SUBSCRIPTION_TYPE_DAILY_DIGEST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('notification_group_code', $data ?? [], null);
        $this->setIfExists('notification_group_name', $data ?? [], null);
        $this->setIfExists('default_subscribed', $data ?? [], null);
        $this->setIfExists('allow_user_unsubscribed', $data ?? [], null);
        $this->setIfExists('support_attachments', $data ?? [], null);
        $this->setIfExists('support_multiple_recipients', $data ?? [], null);
        $this->setIfExists('support_daily_digest', $data ?? [], null);
        $this->setIfExists('support_translations', $data ?? [], null);
        $this->setIfExists('notification_type', $data ?? [], null);
        $this->setIfExists('subscription_type', $data ?? [], null);
        $this->setIfExists('custom_metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNotificationTypeAllowableValues();
        if (!is_null($this->container['notification_type']) && !in_array($this->container['notification_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'notification_type', must be one of '%s'",
                $this->container['notification_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubscriptionTypeAllowableValues();
        if (!is_null($this->container['subscription_type']) && !in_array($this->container['subscription_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subscription_type', must be one of '%s'",
                $this->container['subscription_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets notification_group_code
     *
     * @return string|null
     */
    public function getNotificationGroupCode()
    {
        return $this->container['notification_group_code'];
    }

    /**
     * Sets notification_group_code
     *
     * @param string|null $notification_group_code notification_group_code
     *
     * @return self
     */
    public function setNotificationGroupCode($notification_group_code)
    {

        if (is_null($notification_group_code)) {
            throw new \InvalidArgumentException('non-nullable notification_group_code cannot be null');
        }

        $this->container['notification_group_code'] = $notification_group_code;

        return $this;
    }

    /**
     * Gets notification_group_name
     *
     * @return string|null
     */
    public function getNotificationGroupName()
    {
        return $this->container['notification_group_name'];
    }

    /**
     * Sets notification_group_name
     *
     * @param string|null $notification_group_name Its a user friendly name. This name is also shown on CNS preferences page when selecting any client system.
     *
     * @return self
     */
    public function setNotificationGroupName($notification_group_name)
    {

        if (is_null($notification_group_name)) {
            throw new \InvalidArgumentException('non-nullable notification_group_name cannot be null');
        }

        $this->container['notification_group_name'] = $notification_group_name;

        return $this;
    }

    /**
     * Gets default_subscribed
     *
     * @return bool|null
     */
    public function getDefaultSubscribed()
    {
        return $this->container['default_subscribed'];
    }

    /**
     * Sets default_subscribed
     *
     * @param bool|null $default_subscribed A flag that indicates if any user is subscribed by default to this notification group.
     *
     * @return self
     */
    public function setDefaultSubscribed($default_subscribed)
    {

        if (is_null($default_subscribed)) {
            throw new \InvalidArgumentException('non-nullable default_subscribed cannot be null');
        }

        $this->container['default_subscribed'] = $default_subscribed;

        return $this;
    }

    /**
     * Gets allow_user_unsubscribed
     *
     * @return bool|null
     */
    public function getAllowUserUnsubscribed()
    {
        return $this->container['allow_user_unsubscribed'];
    }

    /**
     * Sets allow_user_unsubscribed
     *
     * @param bool|null $allow_user_unsubscribed If checked then user can unsubscribe from this notification group on CNS preferences page.
     *
     * @return self
     */
    public function setAllowUserUnsubscribed($allow_user_unsubscribed)
    {

        if (is_null($allow_user_unsubscribed)) {
            throw new \InvalidArgumentException('non-nullable allow_user_unsubscribed cannot be null');
        }

        $this->container['allow_user_unsubscribed'] = $allow_user_unsubscribed;

        return $this;
    }

    /**
     * Gets support_attachments
     *
     * @return bool|null
     */
    public function getSupportAttachments()
    {
        return $this->container['support_attachments'];
    }

    /**
     * Sets support_attachments
     *
     * @param bool|null $support_attachments If checked this notification group will allow attachments to be included with notification and sent via email.
     *
     * @return self
     */
    public function setSupportAttachments($support_attachments)
    {

        if (is_null($support_attachments)) {
            throw new \InvalidArgumentException('non-nullable support_attachments cannot be null');
        }

        $this->container['support_attachments'] = $support_attachments;

        return $this;
    }

    /**
     * Gets support_multiple_recipients
     *
     * @return bool|null
     */
    public function getSupportMultipleRecipients()
    {
        return $this->container['support_multiple_recipients'];
    }

    /**
     * Sets support_multiple_recipients
     *
     * @param bool|null $support_multiple_recipients If checked this notification group will allow more users to be added to a notification. Otherwise client system must submit notification for each user separatelly.
     *
     * @return self
     */
    public function setSupportMultipleRecipients($support_multiple_recipients)
    {

        if (is_null($support_multiple_recipients)) {
            throw new \InvalidArgumentException('non-nullable support_multiple_recipients cannot be null');
        }

        $this->container['support_multiple_recipients'] = $support_multiple_recipients;

        return $this;
    }

    /**
     * Gets support_daily_digest
     *
     * @return bool|null
     */
    public function getSupportDailyDigest()
    {
        return $this->container['support_daily_digest'];
    }

    /**
     * Sets support_daily_digest
     *
     * @param bool|null $support_daily_digest This will allow for user to select between receiving notifications once per day as daily digest or as separate notifications. User will always receive daily digest with all notifications together in one email from the notification groups set as daily digest.
     *
     * @return self
     */
    public function setSupportDailyDigest($support_daily_digest)
    {

        if (is_null($support_daily_digest)) {
            throw new \InvalidArgumentException('non-nullable support_daily_digest cannot be null');
        }

        $this->container['support_daily_digest'] = $support_daily_digest;

        return $this;
    }

    /**
     * Gets support_translations
     *
     * @return bool|null
     */
    public function getSupportTranslations()
    {
        return $this->container['support_translations'];
    }

    /**
     * Sets support_translations
     *
     * @param bool|null $support_translations If checked this notification group will allow more then one content (each content is added for different language). When notification is sent to the user then content is selected that matches the user's selected language (set on CNS preferences page).
     *
     * @return self
     */
    public function setSupportTranslations($support_translations)
    {

        if (is_null($support_translations)) {
            throw new \InvalidArgumentException('non-nullable support_translations cannot be null');
        }

        $this->container['support_translations'] = $support_translations;

        return $this;
    }

    /**
     * Gets notification_type
     *
     * @return string|null
     */
    public function getNotificationType()
    {
        return $this->container['notification_type'];
    }

    /**
     * Sets notification_type
     *
     * @param string|null $notification_type The type of the notifications is - MESSAGE (plain message) - TASK (planned, with deadline) - REPORT
     *
     * @return self
     */
    public function setNotificationType($notification_type)
    {
        $allowedValues = $this->getNotificationTypeAllowableValues();
        if (!is_null($notification_type) && !in_array($notification_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'notification_type', must be one of '%s'",
                    $notification_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($notification_type)) {
            throw new \InvalidArgumentException('non-nullable notification_type cannot be null');
        }

        $this->container['notification_type'] = $notification_type;

        return $this;
    }

    /**
     * Gets subscription_type
     *
     * @return string|null
     */
    public function getSubscriptionType()
    {
        return $this->container['subscription_type'];
    }

    /**
     * Sets subscription_type
     *
     * @param string|null $subscription_type Defines the subscription type which can be either INSTANT or DAILY DIGEST. This is the initial setup and user can change this on CNS preferences page.
     *
     * @return self
     */
    public function setSubscriptionType($subscription_type)
    {
        $allowedValues = $this->getSubscriptionTypeAllowableValues();
        if (!is_null($subscription_type) && !in_array($subscription_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subscription_type', must be one of '%s'",
                    $subscription_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($subscription_type)) {
            throw new \InvalidArgumentException('non-nullable subscription_type cannot be null');
        }

        $this->container['subscription_type'] = $subscription_type;

        return $this;
    }

    /**
     * Gets custom_metadata
     *
     * @return \EC\CNS\Client\Model\CustomMetadataDefinition[]|null
     */
    public function getCustomMetadata()
    {
        return $this->container['custom_metadata'];
    }

    /**
     * Sets custom_metadata
     *
     * @param \EC\CNS\Client\Model\CustomMetadataDefinition[]|null $custom_metadata custom_metadata
     *
     * @return self
     */
    public function setCustomMetadata($custom_metadata)
    {

        if (is_null($custom_metadata)) {
            throw new \InvalidArgumentException('non-nullable custom_metadata cannot be null');
        }

        $this->container['custom_metadata'] = $custom_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


