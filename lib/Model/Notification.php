<?php
/**
 * Notification
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CNS REST-API
 *
 * Version v1.2.0 of Corporate Notification System (CNS) REST API.
 *
 * The version of the OpenAPI document: v1.2.0
 * Contact: DIGIT-CNS-SUPPORT@ec.europa.eu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EC\CNS\Client\Model;

use \ArrayAccess;
use \EC\CNS\Client\ObjectSerializer;

/**
 * Notification Class Doc Comment
 *
 * @category Class
 * @package  EC\CNS\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Notification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Notification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'notification_id' => 'int',
        'notification_group_code' => 'string',
        'recipients' => '\EC\CNS\Client\Model\Recipient[]',
        'default_content' => '\EC\CNS\Client\Model\ContentTranslation',
        'alternative_content_translations' => '\EC\CNS\Client\Model\ContentTranslation[]',
        'task_deadline' => '\DateTime',
        'planned_date' => '\DateTime',
        'external_reference' => 'string',
        'business_specific_metadata' => '\EC\CNS\Client\Model\BusinessSpecificMetadata',
        'important' => 'bool',
        'read' => 'bool',
        'status' => 'string',
        'submission_date' => '\DateTime',
        'last_modification_date' => '\DateTime',
        'client_system_id' => 'int',
        'client_system_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'notification_id' => 'int64',
        'notification_group_code' => null,
        'recipients' => null,
        'default_content' => null,
        'alternative_content_translations' => null,
        'task_deadline' => 'date-time',
        'planned_date' => 'date-time',
        'external_reference' => null,
        'business_specific_metadata' => null,
        'important' => null,
        'read' => null,
        'status' => null,
        'submission_date' => 'date-time',
        'last_modification_date' => 'date-time',
        'client_system_id' => 'int64',
        'client_system_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'notification_id' => false,
		'notification_group_code' => false,
		'recipients' => false,
		'default_content' => false,
		'alternative_content_translations' => false,
		'task_deadline' => false,
		'planned_date' => false,
		'external_reference' => false,
		'business_specific_metadata' => false,
		'important' => false,
		'read' => false,
		'status' => false,
		'submission_date' => false,
		'last_modification_date' => false,
		'client_system_id' => false,
		'client_system_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notification_id' => 'notificationId',
        'notification_group_code' => 'notificationGroupCode',
        'recipients' => 'recipients',
        'default_content' => 'defaultContent',
        'alternative_content_translations' => 'alternativeContentTranslations',
        'task_deadline' => 'taskDeadline',
        'planned_date' => 'plannedDate',
        'external_reference' => 'externalReference',
        'business_specific_metadata' => 'businessSpecificMetadata',
        'important' => 'important',
        'read' => 'read',
        'status' => 'status',
        'submission_date' => 'submissionDate',
        'last_modification_date' => 'lastModificationDate',
        'client_system_id' => 'clientSystemId',
        'client_system_name' => 'clientSystemName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notification_id' => 'setNotificationId',
        'notification_group_code' => 'setNotificationGroupCode',
        'recipients' => 'setRecipients',
        'default_content' => 'setDefaultContent',
        'alternative_content_translations' => 'setAlternativeContentTranslations',
        'task_deadline' => 'setTaskDeadline',
        'planned_date' => 'setPlannedDate',
        'external_reference' => 'setExternalReference',
        'business_specific_metadata' => 'setBusinessSpecificMetadata',
        'important' => 'setImportant',
        'read' => 'setRead',
        'status' => 'setStatus',
        'submission_date' => 'setSubmissionDate',
        'last_modification_date' => 'setLastModificationDate',
        'client_system_id' => 'setClientSystemId',
        'client_system_name' => 'setClientSystemName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notification_id' => 'getNotificationId',
        'notification_group_code' => 'getNotificationGroupCode',
        'recipients' => 'getRecipients',
        'default_content' => 'getDefaultContent',
        'alternative_content_translations' => 'getAlternativeContentTranslations',
        'task_deadline' => 'getTaskDeadline',
        'planned_date' => 'getPlannedDate',
        'external_reference' => 'getExternalReference',
        'business_specific_metadata' => 'getBusinessSpecificMetadata',
        'important' => 'getImportant',
        'read' => 'getRead',
        'status' => 'getStatus',
        'submission_date' => 'getSubmissionDate',
        'last_modification_date' => 'getLastModificationDate',
        'client_system_id' => 'getClientSystemId',
        'client_system_name' => 'getClientSystemName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('notification_id', $data ?? [], null);
        $this->setIfExists('notification_group_code', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('default_content', $data ?? [], null);
        $this->setIfExists('alternative_content_translations', $data ?? [], null);
        $this->setIfExists('task_deadline', $data ?? [], null);
        $this->setIfExists('planned_date', $data ?? [], null);
        $this->setIfExists('external_reference', $data ?? [], null);
        $this->setIfExists('business_specific_metadata', $data ?? [], null);
        $this->setIfExists('important', $data ?? [], null);
        $this->setIfExists('read', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('submission_date', $data ?? [], null);
        $this->setIfExists('last_modification_date', $data ?? [], null);
        $this->setIfExists('client_system_id', $data ?? [], null);
        $this->setIfExists('client_system_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets notification_id
     *
     * @return int|null
     */
    public function getNotificationId()
    {
        return $this->container['notification_id'];
    }

    /**
     * Sets notification_id
     *
     * @param int|null $notification_id The unique notification identifier.
     *
     * @return self
     */
    public function setNotificationId($notification_id)
    {

        if (is_null($notification_id)) {
            throw new \InvalidArgumentException('non-nullable notification_id cannot be null');
        }

        $this->container['notification_id'] = $notification_id;

        return $this;
    }

    /**
     * Gets notification_group_code
     *
     * @return string|null
     */
    public function getNotificationGroupCode()
    {
        return $this->container['notification_group_code'];
    }

    /**
     * Sets notification_group_code
     *
     * @param string|null $notification_group_code The notification group to which this notification belongs.
     *
     * @return self
     */
    public function setNotificationGroupCode($notification_group_code)
    {

        if (is_null($notification_group_code)) {
            throw new \InvalidArgumentException('non-nullable notification_group_code cannot be null');
        }

        $this->container['notification_group_code'] = $notification_group_code;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \EC\CNS\Client\Model\Recipient[]|null
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \EC\CNS\Client\Model\Recipient[]|null $recipients List of recipients. At least one recipient is expected. Maximum supported number of recipients of any kind is 100.
     *
     * @return self
     */
    public function setRecipients($recipients)
    {

        if (is_null($recipients)) {
            throw new \InvalidArgumentException('non-nullable recipients cannot be null');
        }

        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets default_content
     *
     * @return \EC\CNS\Client\Model\ContentTranslation|null
     */
    public function getDefaultContent()
    {
        return $this->container['default_content'];
    }

    /**
     * Sets default_content
     *
     * @param \EC\CNS\Client\Model\ContentTranslation|null $default_content default_content
     *
     * @return self
     */
    public function setDefaultContent($default_content)
    {

        if (is_null($default_content)) {
            throw new \InvalidArgumentException('non-nullable default_content cannot be null');
        }

        $this->container['default_content'] = $default_content;

        return $this;
    }

    /**
     * Gets alternative_content_translations
     *
     * @return \EC\CNS\Client\Model\ContentTranslation[]|null
     */
    public function getAlternativeContentTranslations()
    {
        return $this->container['alternative_content_translations'];
    }

    /**
     * Sets alternative_content_translations
     *
     * @param \EC\CNS\Client\Model\ContentTranslation[]|null $alternative_content_translations Optionally, the content translated in other languages.
     *
     * @return self
     */
    public function setAlternativeContentTranslations($alternative_content_translations)
    {

        if (is_null($alternative_content_translations)) {
            throw new \InvalidArgumentException('non-nullable alternative_content_translations cannot be null');
        }

        $this->container['alternative_content_translations'] = $alternative_content_translations;

        return $this;
    }

    /**
     * Gets task_deadline
     *
     * @return \DateTime|null
     */
    public function getTaskDeadline()
    {
        return $this->container['task_deadline'];
    }

    /**
     * Sets task_deadline
     *
     * @param \DateTime|null $task_deadline Optional task deadline (applies only to notifications of type task).
     *
     * @return self
     */
    public function setTaskDeadline($task_deadline)
    {

        if (is_null($task_deadline)) {
            throw new \InvalidArgumentException('non-nullable task_deadline cannot be null');
        }

        $this->container['task_deadline'] = $task_deadline;

        return $this;
    }

    /**
     * Gets planned_date
     *
     * @return \DateTime|null
     */
    public function getPlannedDate()
    {
        return $this->container['planned_date'];
    }

    /**
     * Sets planned_date
     *
     * @param \DateTime|null $planned_date Optional planned date of delivery.
     *
     * @return self
     */
    public function setPlannedDate($planned_date)
    {

        if (is_null($planned_date)) {
            throw new \InvalidArgumentException('non-nullable planned_date cannot be null');
        }

        $this->container['planned_date'] = $planned_date;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string|null
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string|null $external_reference Optional value that uniquely identifies the notification in the client system.
     *
     * @return self
     */
    public function setExternalReference($external_reference)
    {

        if (is_null($external_reference)) {
            throw new \InvalidArgumentException('non-nullable external_reference cannot be null');
        }

        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets business_specific_metadata
     *
     * @return \EC\CNS\Client\Model\BusinessSpecificMetadata|null
     */
    public function getBusinessSpecificMetadata()
    {
        return $this->container['business_specific_metadata'];
    }

    /**
     * Sets business_specific_metadata
     *
     * @param \EC\CNS\Client\Model\BusinessSpecificMetadata|null $business_specific_metadata business_specific_metadata
     *
     * @return self
     */
    public function setBusinessSpecificMetadata($business_specific_metadata)
    {

        if (is_null($business_specific_metadata)) {
            throw new \InvalidArgumentException('non-nullable business_specific_metadata cannot be null');
        }

        $this->container['business_specific_metadata'] = $business_specific_metadata;

        return $this;
    }

    /**
     * Gets important
     *
     * @return bool|null
     */
    public function getImportant()
    {
        return $this->container['important'];
    }

    /**
     * Sets important
     *
     * @param bool|null $important Optional flag to set send email as important to indicate that email needs the recipient attention quickly.
     *
     * @return self
     */
    public function setImportant($important)
    {

        if (is_null($important)) {
            throw new \InvalidArgumentException('non-nullable important cannot be null');
        }

        $this->container['important'] = $important;

        return $this;
    }

    /**
     * Gets read
     *
     * @return bool|null
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param bool|null $read Flag to indicate if notification was read.
     *
     * @return self
     */
    public function setRead($read)
    {

        if (is_null($read)) {
            throw new \InvalidArgumentException('non-nullable read cannot be null');
        }

        $this->container['read'] = $read;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the notification. List of supported statuses: DAILY_DIGEST, INCLUDED_IN_DAILY_DIGEST, READY_FOR_DELIVERY, ACCEPTED_FOR_DELIVERY, PROCESSING_ERROR, PLANNED, CANCELED, DISCARDED.
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets submission_date
     *
     * @return \DateTime|null
     */
    public function getSubmissionDate()
    {
        return $this->container['submission_date'];
    }

    /**
     * Sets submission_date
     *
     * @param \DateTime|null $submission_date Date and time when the notification was submitted.
     *
     * @return self
     */
    public function setSubmissionDate($submission_date)
    {

        if (is_null($submission_date)) {
            throw new \InvalidArgumentException('non-nullable submission_date cannot be null');
        }

        $this->container['submission_date'] = $submission_date;

        return $this;
    }

    /**
     * Gets last_modification_date
     *
     * @return \DateTime|null
     */
    public function getLastModificationDate()
    {
        return $this->container['last_modification_date'];
    }

    /**
     * Sets last_modification_date
     *
     * @param \DateTime|null $last_modification_date Date and time when the notification was last modified (e.g. its status was updated).
     *
     * @return self
     */
    public function setLastModificationDate($last_modification_date)
    {

        if (is_null($last_modification_date)) {
            throw new \InvalidArgumentException('non-nullable last_modification_date cannot be null');
        }

        $this->container['last_modification_date'] = $last_modification_date;

        return $this;
    }

    /**
     * Gets client_system_id
     *
     * @return int|null
     */
    public function getClientSystemId()
    {
        return $this->container['client_system_id'];
    }

    /**
     * Sets client_system_id
     *
     * @param int|null $client_system_id The unique client system identifier.
     *
     * @return self
     */
    public function setClientSystemId($client_system_id)
    {

        if (is_null($client_system_id)) {
            throw new \InvalidArgumentException('non-nullable client_system_id cannot be null');
        }

        $this->container['client_system_id'] = $client_system_id;

        return $this;
    }

    /**
     * Gets client_system_name
     *
     * @return string|null
     */
    public function getClientSystemName()
    {
        return $this->container['client_system_name'];
    }

    /**
     * Sets client_system_name
     *
     * @param string|null $client_system_name The client system name.
     *
     * @return self
     */
    public function setClientSystemName($client_system_name)
    {

        if (is_null($client_system_name)) {
            throw new \InvalidArgumentException('non-nullable client_system_name cannot be null');
        }

        $this->container['client_system_name'] = $client_system_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


